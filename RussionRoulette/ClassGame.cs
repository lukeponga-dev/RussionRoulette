using System;

namespace RussionRoulette
{
    internal class ClassGame
    {
        public ClassGame()
        {
            NewGame();
        }

        /// <summary>
        ///     Random number generator
        /// </summary>
        private Random NumGenerator { set; get; } = new Random(DateTime.Now.Millisecond);

        /// <summary>
        ///     The number of away shots available
        /// </summary>
        public int AwayCount { set; get; } = 2;

        /// <summary>
        ///     The total number of chambers used game
        /// </summary>
        public int NoOfChamber { set; get; } = 6;

        /// <summary>
        /// </summary>
        public int CurrentChamberID { private set; get; } = 0;

        /// <summary>
        ///     Total number of games pLayer has played
        /// </summary>
        public int TotalGamePlayed { private set; get; } = 0;

        /// <summary>
        ///     The chamber number the bullet is in.
        ///     This is generated by the random generator whenever new game start.
        /// </summary>
        public int SecretChamberID { private set; get; } = 1;

        public int Win { private set; get; }

        public int Lose => TotalGamePlayed - Win;

        /// <summary>
        ///     The function is called when starting a new game.
        ///     generates new secret chamber ID and reset game variable to initial value;
        /// </summary>
        public void NewGame()
        {
            // generate the secret chamber ID to be guessed
            SecretChamberID = NumGenerator.Next(1, NoOfChamber + 1);
            AwayCount = 2; // Total Available away shots 2 
            CurrentChamberID = 1;
        }

        /// <summary>
        ///     Check whether current chamber ID match the secret chamber ID.
        ///     Return true if matched, else return false.
        /// </summary>
        /// <returns>return True when the current chamber ID match the secret chamber ID</returns>
        public bool bulletShot()
        {
            return CurrentChamberID == SecretChamberID;
        }

        /// <summary>
        ///     increment to the next chamber number.
        /// </summary>
        public void Next()
        {
            CurrentChamberID++;
        }

        public void YouWon()
        {
            Win++;
            TotalGamePlayed++;
        }

        public void YouLose()
        {
            TotalGamePlayed++;
        }
    }
}